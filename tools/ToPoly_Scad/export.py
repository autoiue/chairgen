"""
    usage: export.py [-h] [-s SCRIPT] [-v] [-S] [-l LENGTH] -i [INPUT] -o [OUTPUT]

    -h : print help message
    -s : script to apply (default: "voxels.scad") should contain at least "module atom(x, y, z){}"
    -v : verbose-
    -C : compile generated file (10000pts/hour, very slow !)

"""

import argparse
import io, os
import subprocess
from operator import itemgetter

verbose = False
script = ''

supported_ext = ['.xyz']

FNULL = open(os.devnull, 'w')

def process_scad(file_path, output_file):
    # if not verbose:
    #     subprocess.call(['meshlabserver', '-i', file_path, '-o', output_file, '-s', script, '-om', 'vn'], stdout=FNULL, stderr=subprocess.STDOUT)
    # else:
    #     subprocess.call(['meshlabserver', '-i', file_path, '-o', output_file, '-s', script, '-om', 'vn'])
    pass

def process_xyz(input_file, script_file, output_file):
    # center X & Z, Ys start at 0
    # scale everything uniformly so maxY == 1s
    try:
        with open(input_file) as i, open(script_file) as s, open(output_file, 'w') as o:
            out = []
            coords = []

            out.append('// BEGIN SCRIPT:')
            out.append('// '+str(script_file))

            for line in s:
                out.append(line[:-1])

            out.append('// BEGIN AUTOGENERATED')
            out.append('// '+str(input_file))

            for line in i:
                data = [float(n.replace(',', '.')) for n in line.strip().split(" ")]
                if len(data) > 3:
                    coords.append(data)

            for c in coords:
                data = []
                i = 0
                for v in c:
                    data.append('%.10f' % (v))
                    i+=1

                out.append('atom('+','.join(data[:3])+');')

            o.write('\n'.join(out))
        #os.remove(input_file)
    except Exception as e:
        if(verbose):
            raise e
    finally:
        pass
    

def find(input_dir, script_file, output_dir):

    input_dir = os.path.abspath(input_dir)
    output_dir = os.path.abspath(output_dir)
    next_id = 0

    for root, subdirs, files in os.walk(output_dir):
        for filename in files:
            file_path = os.path.join(root, filename)

            fname, ext = os.path.splitext(file_path)
            ext = ext.lower()
            if(ext in ['.scad']):
                try:
                    next_id = max(next_id, int(os.path.basename(fname)))
                except Exception as e:
                    pass

    next_id += 1
    print("Next ID: "+ str(next_id))

    for root, subdirs, files in os.walk(input_dir):
        for filename in files:
            file_path = os.path.join(root, filename)

            fname, ext = os.path.splitext(file_path)
            ext = ext.lower()
            if(ext in supported_ext):
                print(format(next_id, '05d')+" : processing: "+filename+" ...")
                process_xyz(file_path, script_file, os.path.join(output_dir, format(next_id, '05d')+".scad"))
                next_id += 1

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Recursively find .xyz pointcloud and apply simple openScad script')
    requiredNamed = parser.add_argument_group('required named arguments')


    requiredNamed.add_argument('-s', '--script')
    parser.add_argument('-v', '--verbose', dest='verbose', action='store_true')
    parser.set_defaults(script='voxels.scad')
    parser.set_defaults(verbose=False)
    requiredNamed.add_argument('-i', '--input', nargs='?', required=True)
    requiredNamed.add_argument('-o', '--output', nargs='?', required=True)
    args = parser.parse_args()
    verbose = args.verbose
    script = args.script
    find(args.input, script, args.output)